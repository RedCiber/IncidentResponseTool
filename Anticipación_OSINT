Para algunos la anticipación no es necesaria en el concepto RRA (Responder, Reaccionar y Anticipar), en respuesta a incientes es importante tener en cuenta estos factores para poder generar información de inteligencia que permita asocia una amenaza reciente para evitar un incidente.

Búsqeudas OSINT:


>>>>https://inteltechniques.com/
>>>>https://nitinpandey.in/ihunt/
>>>>https://osint.link/#leak
>>>>

WINDOWS:

Busqueda de metadatos en Documentos Engine: 
------https://whereisdoc.com/
------http://www.doc-txt.com/
------https://www.documentcloud.org/home


IP address, Hash Values,domains,URL’s and file information

Below are some of the OSINT tools and their links …

Virustotal: https://www.virustotal.com/gui/home/upload

AbuseIPDB : https://www.abuseipdb.com/

IBM X-Force Exchange: https://exchange.xforce.ibmcloud.com/

AlienValut: https://otx.alienvault.com/dashboard/new

BGP Tool kit: https://bgp.he.net/

Whois lookup: whois.doamintools.com

check website is malicious/scam: https://www.urlvoid.com/

Site review: https://sitereview.bluecoat.com/

Url testing: https://trustedsource.org/

Sucuri:https://sitecheck.sucuri.net/

Cross-Browser testing: https://www.browserling.com/

Compendio SANS Intelligence: https://www.sans.org/blog/geolocation-resources-for-osint-investigations/


OSINT Framework

-----https://osintframework.com/


import requests
from bs4 import BeautifulSoup

# Lista de dorks de seguridad para búsqueda
dorks = [
    'intitle:index.of people.lst',
    'inurl:clearpasslist.txt intitle:"index of"',
    'intext:globals.inc filetype:reg reg +intext:"defaultusername" +intext:"defaultpassword"',
    # Agrega el resto de los dorks aquí
]

# Función para realizar la búsqueda de información basada en dorks de seguridad
def buscar_info_dorks(dork, keywords):
    search_query = f"{dork} {keywords}"
    url = f"https://www.google.com/search?q={search_query}"
    headers = {'User-Agent': 'Mozilla/5.0'}
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        print(f"Resultados para el dork de seguridad '{dork}' con palabras clave '{keywords}':")
        print("--------------")
        soup = BeautifulSoup(response.text, 'html.parser')
        search_results = soup.find_all('a')
        urls_encontradas = [result.get('href') for result in search_results if result.get('href').startswith('http')]
        for url in urls_encontradas:
            print(url)
        print("\n")
    else:
        print(f"Error al realizar la búsqueda para el dork de seguridad '{dork}' con palabras clave '{keywords}'")

# Solicitar al usuario ingresar las palabras clave
keywords = input("Ingresa las palabras clave para la búsqueda: ")

# Ejecutar la búsqueda para cada dork de seguridad con las palabras clave ingresadas
for dork in dorks:
    buscar_info_dorks(dork, keywords)

Google Dorks Conocidos: https://antoniogonzalezm.es/google-hacking-46-ejemplos-hacker-contrasenas-usando-google-enemigo-peor/


